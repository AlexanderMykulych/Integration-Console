<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Terrasoft.WebApp</name>
    </assembly>
    <members>
        <member name="T:Terrasoft.WebApp.Nui.Feedback">
            <summary>
            A class that allows to load feedback modules and pages.
            </summary>
        </member>
        <member name="M:Terrasoft.WebApp.Nui.Feedback.GetIsAllowedUser(System.String)">
            <summary>
            Gets is user allowed.
            </summary>
            <param name="userName">User name.</param>
            <returns>Always true.</returns>
        </member>
        <member name="M:Terrasoft.WebApp.Nui.Feedback.GetLoaderUrl">
            <summary>
            Gets loader URL.
            </summary>
            <returns>Loader URL.</returns>
        </member>
        <member name="M:Terrasoft.WebApp.Nui.Feedback.SetupLocalizableStrings">
            <summary>
            Sets up localizable strings by user culture from HTTP context.
            </summary>
        </member>
        <member name="M:Terrasoft.WebApp.Nui.Feedback.SetResponseImage(System.String)">
            <summary>
            Sets image to response from system settings.
            </summary>
            <param name="imageCode">System setting image code.</param>
        </member>
        <member name="M:Terrasoft.WebApp.Nui.Feedback.Page_Load(System.Object,System.EventArgs)">
            <summary>
            Page load event handler.
            </summary>
            <param name="sender">Event sender.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:Terrasoft.WebApp.Nui.Feedback.FeedbackForm">
            <summary>
            FeedbackForm control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="P:Terrasoft.WebApp.Nui.Feedback.AllowedFeedbackModules">
            <summary>
            A set of allowed feedback modules.
            </summary>
        </member>
        <member name="P:Terrasoft.WebApp.Nui.Feedback.RequestedModule">
            <summary>
            Requested module.
            </summary>
        </member>
        <member name="P:Terrasoft.WebApp.Nui.Feedback.Token">
            <summary>
            Request token parameter.
            </summary>
        </member>
        <member name="P:Terrasoft.WebApp.Nui.Feedback.FeedbackSchemaName">
            <summary>
            Request feedback schema name parameter.
            </summary>
        </member>
        <member name="F:Terrasoft.WebApp.Nui.UserManagement.UserManagementForm">
            <summary>
            UserManagementForm control.
            </summary>
            <remarks>
            Auto-generated field.
            To modify move field declaration from designer file to code-behind file.
            </remarks>
        </member>
        <member name="T:Terrasoft.WebApp.PackageExporter.IPackageExporter">
            <summary>
            Provides methods to export packages.
            </summary>
        </member>
        <member name="M:Terrasoft.WebApp.PackageExporter.IPackageExporter.ExportToFile(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Exports collection of packages to file.
            </summary>
            <param name="packageNames">Names of packages to export.</param>
            <returns>Path to file with packages.</returns>
        </member>
        <member name="T:Terrasoft.WebApp.PackageInstaller.IPackageInstallFileLogAppender">
            <summary>
            Defines methods to register file appender for logging package installation process.
            </summary>
        </member>
        <member name="M:Terrasoft.WebApp.PackageInstaller.IPackageInstallFileLogAppender.Register(System.String)">
            <summary>
            Registers file appender in package installation logger.
            </summary>
            <param name="filePath">Path to file where logs will be saved.</param>
            <returns><see cref="T:System.IDisposable"/> instance which unregisters file provider.</returns>
            <exception cref="T:Terrasoft.Common.ArgumentNullOrEmptyException">
            In case if <c>null</c> or empty string passed as value of parameter <paramref name="filePath"/>.
            </exception>
        </member>
        <member name="T:Terrasoft.WebApp.PackageInstaller.IPackageInstallerServiceInternal">
            <summary>
            Defines methods to install archive with packages to current application persistence storage.
            Implementation of this interface should encapsulate business logic of <see cref="T:Terrasoft.Core.ServiceModelContract.IPackageInstallerService"/>.
            </summary>
        </member>
        <member name="M:Terrasoft.WebApp.PackageInstaller.IPackageInstallerServiceInternal.UploadPackage(Terrasoft.WebApp.PackageInstaller.IUploadFileInfo)">
            <summary>
            Uploads archive of packages to current application temporary storage.
            </summary>
            <param name="uploadingFileInfo">Instance of <see cref="T:Terrasoft.WebApp.PackageInstaller.IUploadFileInfo"/>.</param>
        </member>
        <member name="M:Terrasoft.WebApp.PackageInstaller.IPackageInstallerServiceInternal.InstallPackage(System.String)">
            <summary>
            Installs archive of packages to current application persistence storage.
            </summary>
            <param name="zipPackageName">Name of uploaded archive to install.</param>
            <returns>
            Returns <c>true</c> if archive of packages has been installed successfully.
            Otherwise returns <c>false</c>.
            </returns>
        </member>
        <member name="M:Terrasoft.WebApp.PackageInstaller.IPackageInstallerServiceInternal.GetLogFile">
            <summary>
            Returns <see cref="T:System.IO.Stream"/> that contains installation log file data.
            </summary>
            <returns><see cref="T:System.IO.Stream"/> that contains installation log file data.</returns>
        </member>
        <member name="M:Terrasoft.WebApp.PackageInstaller.IPackageInstallerServiceInternal.GetLogFileName">
            <summary>
            Returns name of installation log file.
            </summary>
            <returns>Name of installation log file.</returns>
        </member>
        <member name="M:Terrasoft.WebApp.PackageInstaller.IPackageInstallerServiceInternal.CreateBackup(System.String)">
            <summary>
            Creates backup that contains difference in data between system packages and archive of packages 
            provided by <paramref name="zipPackageName"/>.
            </summary>
            <param name="zipPackageName">Name of packages archive.</param>
        </member>
        <member name="M:Terrasoft.WebApp.PackageInstaller.IPackageInstallerServiceInternal.RestoreFromBackup">
            <summary>
            Restores configuration from backup.
            </summary>
            <returns>
            Returns <c>true</c> if configuration has been restored successfully.
            Otherwise returns <c>false</c>.
            </returns>
        </member>
        <member name="T:Terrasoft.WebApp.PackageInstaller.IStreamToFileSaver">
            <summary>
            Provides methods to save stream to a file.
            </summary>
        </member>
        <member name="M:Terrasoft.WebApp.PackageInstaller.IStreamToFileSaver.Save(System.IO.Stream,System.String)">
            <summary>
            Saves <paramref name="stream"/> to a file.
            </summary>
            <param name="stream">Instance of <see cref="T:System.IO.Stream"/>.</param>
            <param name="filePath">Path to a file to which <paramref name="stream"/> should be saved.</param>
            <remarks>
            This method creates directory provided by <paramref name="filePath"/> in case if it does not exist.
            If file provided by <paramref name="filePath"/> already exists it will be overwritten.
            </remarks>
            <exception cref="T:System.IO.IOException">
            The directory specified by <paramref name="filePath"/> is read-only or
            an I/O error occurred while creating the file. 
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            The caller does not have the required permission.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="filePath"/> contains one or more invalid characters 
            as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>.
            </exception>
            <exception cref="T:System.IO.PathTooLongException">
            The specified <paramref name="filePath"/> exceed the system-defined maximum length.
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">
            The specified <paramref name="filePath"/> is invalid, such as being on an unmapped drive.
            </exception>
            <exception cref="T:System.NotSupportedException">
            Creating a directory with only the colon (:) character was attempted.
            </exception>
            <exception cref="T:Terrasoft.Common.ArgumentNullOrEmptyException">
            <paramref name="stream"/> or <paramref name="filePath"/> is null or empty.
            </exception>
        </member>
        <member name="M:Terrasoft.WebApp.PackageInstaller.IStreamToFileSaver.Append(System.IO.Stream,System.String)">
            <summary>
            Appends <paramref name="stream"/> to a file.
            </summary>
            <param name="stream">Instance of <see cref="T:System.IO.Stream"/>.</param>
            <param name="filePath">Path to a file to which <paramref name="stream"/> should be appended.</param>
            <remarks>
            This method creates new file in case when file provided by <paramref name="filePath"/> doesn't exist.
            </remarks>
            <exception cref="T:System.ArgumentException">
            <paramref name="filePath"/> contains one or more invalid characters 
            as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>.
            </exception>
            <exception cref="T:System.IO.PathTooLongException">
            The specified <paramref name="filePath"/> exceed the system-defined maximum length.
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">
            The specified <paramref name="filePath"/> is invalid, such as being on an unmapped drive.
            </exception>
            <exception cref="T:System.IO.IOException">
            The directory specified by <paramref name="filePath"/> is read-only or
            an I/O error occurred while opening the file. 
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <paramref name="filePath"/> specified a file that is read-only.
            <para>-or-</para>
            This operation is not supported on the current platform.
            <para>-or-</para>
            <paramref name="filePath"/> specified a directory.
            <para>-or-</para>
            The caller does not have the required permission.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="filePath"/> specified an invalid value.
            </exception>
            <exception cref="T:System.NotSupportedException">
            <paramref name="filePath"/> is in an invalid format.
            </exception>
            <exception cref="T:Terrasoft.Common.ArgumentNullOrEmptyException">
            <paramref name="stream"/> or <paramref name="filePath"/> is null or empty.
            </exception>
        </member>
        <member name="T:Terrasoft.WebApp.PackageInstaller.IUploadFileInfo">
            <summary>
            Defines properties and methods to retrieve information about uploading file.
            </summary>
        </member>
        <member name="M:Terrasoft.WebApp.PackageInstaller.IUploadFileInfo.GetContent">
            <summary>
            Gets content of uploading file.
            </summary>
            <remarks>
            In case when upload is chunked (<see cref="P:Terrasoft.WebApp.PackageInstaller.IUploadFileInfo.IsChunkedUpload"/> returns <c>true</c>) 
            returns partial file content.
            </remarks>
            <returns>Instance of <see cref="T:System.IO.Stream"/>.</returns>
        </member>
        <member name="P:Terrasoft.WebApp.PackageInstaller.IUploadFileInfo.IsChunkedUpload">
            <summary>
            Gets a value indicating whether upload is in chunk mode.
            </summary>
        </member>
        <member name="P:Terrasoft.WebApp.PackageInstaller.IUploadFileInfo.IsFirstChunk">
            <summary>
            Gets a value indicating whether this is a first chunk.
            </summary>
        </member>
        <member name="P:Terrasoft.WebApp.PackageInstaller.IUploadFileInfo.IsUploadCompleted">
            <summary>
            Gets a value indicating whether this is a last chunk.
            In case when upload is not in chunk mode returns <c>true</c>.
            </summary>
        </member>
        <member name="P:Terrasoft.WebApp.PackageInstaller.IUploadFileInfo.FileName">
            <summary>
            Gets uploading file name.
            </summary>
        </member>
        <member name="P:Terrasoft.WebApp.PackageInstaller.IUploadFileInfo.UploadedPercent">
            <summary>
            Gets uploaded data percent.
            </summary>
        </member>
        <member name="T:Terrasoft.WebApp.PackageInstaller.IUploadFileInfoFactory">
            <summary>
            Abstract factory for <see cref="T:Terrasoft.WebApp.PackageInstaller.IUploadFileInfo"/>.
            </summary>
        </member>
        <member name="M:Terrasoft.WebApp.PackageInstaller.IUploadFileInfoFactory.GetUploadFileInfo(System.IO.Stream,System.Web.HttpRequestBase)">
            <summary>
            Gets new instance of <see cref="T:Terrasoft.WebApp.PackageInstaller.IUploadFileInfo"/>.
            </summary>
            <param name="fileData">Uploading file data.</param>
            <param name="request">HTTP request.</param>
            <returns>Instance of <see cref="T:Terrasoft.WebApp.PackageInstaller.IUploadFileInfo"/>.</returns>
        </member>
        <member name="T:Terrasoft.WebApp.PerformanceLogging.IPerformanceTimeLogger">
            <summary>
            Provides methods for logging of operation performance.
            </summary>
        </member>
        <member name="M:Terrasoft.WebApp.PerformanceLogging.IPerformanceTimeLogger.LogTime(System.Int64)">
            <summary>
            Logs the time of an operation.
            </summary>
            <param name="milliseconds">Time in milliseconds.</param>
        </member>
        <member name="T:Terrasoft.WebApp.ServiceModel.BaseProcessSchemaManagerService`2">
            <summary>
            The base class that provides common operations to manipulate with Process and Dcm schemas.
            </summary>
            <seealso cref="T:Terrasoft.Web.Common.BaseService"/>
        </member>
        <member name="M:Terrasoft.WebApp.ServiceModel.BaseSchemaService.WriteErrorLog(System.Exception)">
            <summary>
            Writes formatter log to appication log.
            </summary>
            <param name="exception">Exception to write.</param>
        </member>
        <member name="M:Terrasoft.WebApp.ServiceModel.BaseSchemaService.GetExceptionResponse(System.String)">
            <summary>
            Gets success response
            </summary>
            <param name="message">The message.</param>
            <returns>Response string.</returns>
        </member>
        <member name="M:Terrasoft.WebApp.ServiceModel.BaseSchemaService.GetSuccessResponse(System.String)">
            <summary>
            Gets success response
            </summary>
            <param name="message">The message.</param>
            <returns>Response string.</returns>
        </member>
        <member name="M:Terrasoft.WebApp.ServiceModel.BaseSchemaService.ExportInternal(System.Guid)">
            <summary>
            Performs export operation.
            </summary>
            <param name="schemaId">Schema to export.</param>
            <returns>The String with metadata.</returns>
        </member>
        <member name="M:Terrasoft.WebApp.ServiceModel.BaseSchemaService.Export(System.String,System.String)">
            <summary>
            Exports schema MetaData by specified identifier and schema manager name.
            </summary>
            <param name="schemaUId">Schema identifier.</param>
            <param name="managerName">Schema identifier.</param>
        </member>
        <member name="M:Terrasoft.WebApp.ServiceModel.BaseSchemaService.GetUniqueNameAndCaption(System.String)">
            <summary>
            Returns unique manager item name and caption by specified manager name.
            </summary>
            <param name="managerName">Manager name.</param>
            <returns>Json object with name and caption values.</returns>
        </member>
        <member name="M:Terrasoft.WebApp.ServiceModel.BaseSchemaService.CheckHasNoForeignLock(System.String,System.String)">
            <summary>
            Indicates whether the specified schema has any foreign lock.
            </summary>
            <param name="managerName">Schema manager name.</param>
            <param name="schemaUId">Schema identifier.</param>
        </member>
        <member name="M:Terrasoft.WebApp.ServiceModel.BaseProcessSchemaManagerService`2.GetSchemaVersionInfo(System.String,System.String)">
            <summary>
            Returns schema version info.
            </summary>
            <param name="parentSchemaUId">The unique identifier of the parent schema.</param>
            <param name="packageUId">The unique identifier of the package.</param>
            <returns>String that contains the json object.</returns>
        </member>
        <member name="M:Terrasoft.WebApp.ServiceModel.BaseProcessSchemaManagerService`2.SetIsActualVersion(System.String)">
            <summary>
            Sets schema as actual by UId.
            </summary>
            <param name="schemaUId">The schema UId.</param>
            <returns></returns>
        </member>
        <member name="M:Terrasoft.WebApp.ServiceModel.BaseProcessSchemaManagerService`2.GetActualVersionUId(System.String)">
            <summary>
            Gets unique identifier of process schema's actual version.
            </summary>
            <param name="schemaUId">The schema UId.</param>
            <returns></returns>
        </member>
        <member name="T:Terrasoft.WebApp.ServiceModel.DcmSchemaManagerService">
            <summary>
            The web service that provides access to the <see cref="T:Terrasoft.Core.DcmProcess.DcmSchemaManager"/> methods.
            </summary>
            <seealso cref="T:Terrasoft.Web.Common.BaseService"/>
            <seealso cref="T:Terrasoft.Core.ServiceModelContract.IDcmSchemaManagerService"/>
        </member>
        <member name="T:Terrasoft.WebApp.ServiceModel.ProcessSchemaManagerService">
            <summary>
            The web service that provides access to the <see cref="T:Terrasoft.Core.Process.ProcessSchemaManager"/> methods.
            </summary>
            <seealso cref="T:Terrasoft.Core.ServiceModelContract.IProcessSchemaManagerService"/>
        </member>
        <member name="M:Terrasoft.WebApp.ServiceModel.ProcessSchemaManagerService.GetWorkspaceBuilder">
            <summary>
            Gets the workspace builder.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Terrasoft.WebApp.ServiceModel.ProcessSchemaManagerService.GetSchemasByFilter(System.String)">
            <summary>
            Returns schemas list by specified filters.
            </summary>
            <param name="filter">Schemas filter.</param>
            <returns></returns>
        </member>
        <member name="M:Terrasoft.WebApp.ServiceModel.ProcessSchemaManagerService.Copy(System.String)">
            <summary>
            Copies process schema.
            </summary>
            <param name="data">Schema data.</param>
            <returns>Copied schema identifier.</returns>
        </member>
        <member name="M:Terrasoft.WebApp.ServiceModel.ProcessSchemaManagerService.Delete(System.String)">
            <summary>
            Deletes process schema by specified identifier.
            </summary>
            <param name="schemaUId">Schema identifier.</param>
        </member>
        <member name="M:Terrasoft.WebApp.ServiceModel.ProcessSchemaManagerService.GetInvalidElements(System.String,System.String)">
            <summary>
            Returns invalid elements list for the specified process schema.
            </summary>
            <param name="schemaUId">Process schema identifier.</param>
            <param name="hostProcessSchemaName">Optional. Host process schema name,
            if checked schema is sub-process.</param>
        </member>
        <member name="M:Terrasoft.WebApp.ServiceModel.ProcessSchemaManagerService.PingApplication">
            <summary>
            Ping application after configuration compiled.
            </summary>
        </member>
        <member name="M:Terrasoft.WebApp.SvnPageUtilities.ExecuteSvnOperation(System.Action,System.Action{System.Exception,System.String})">
            <summary>
            Executes svn operation, if exception occured handles errorCallback.
            </summary>
            <param name="operation">Operation.</param>
            <param name="errorCallback">Error callback</param>
        </member>
        <member name="M:Terrasoft.WebApp.SvnPageUtilities.GetHasSchemaForeignLock(Terrasoft.Core.Schema,System.String@)">
            <summary>
            Indicates if the specified schema locked by another user.
            </summary>
            <param name="schema">Schema.</param>
            <param name="confirmMessage">Message if schema is locked.</param>
            <returns></returns>
        </member>
        <member name="T:Terrasoft.WebApp.ServiceModel.ProcessEngineService">
            <summary>
            The web service that provides access to the <see cref="T:Terrasoft.Core.ProcessEngine"/> methods.
            </summary>
            <seealso cref="T:Terrasoft.Web.Common.BaseService"/>
            <seealso cref="T:Terrasoft.Core.ServiceModelContract.IProcessEngineService"/>
        </member>
        <member name="M:Terrasoft.WebApp.ServiceModel.ProcessEngineService.GetExecutionData(System.String,System.String)">
            <summary>
            Returns additional data for the opening page.
            </summary>
            <param name="elementUId">Identifier of the process element.</param>
            <param name="recordId">Identifier of the entity.</param>
            <returns>String that contains additional data for the opening page.</returns>
        </member>
        <member name="M:Terrasoft.WebApp.ServiceModel.ProcessEngineService.GetExecutionData(Terrasoft.Core.ServiceModelContract.ProcessExecutionDataRequest)">
            <summary>
            Returns data for the opening page by the specified elements.
            </summary>
            <param name="request">Request.</param>
            <returns>Additional batch data for the opening page.</returns>
        </member>
        <member name="M:Terrasoft.WebApp.ServiceModel.ProcessEngineService.GetDcmExecutionData(Terrasoft.Core.ServiceModelContract.DcmExecutionDataRequest)">
            <summary>
            Returns data for the opening page by the specified dcm elements.
            </summary>
            <param name="request">Request.</param>
            <returns>Additional batch data for the opening page.</returns>
        </member>
        <member name="M:Terrasoft.WebApp.ServiceModel.ProcessEngineService.CancelExecutionBySchemaId(System.String)">
            <summary>
            Cancells execution of all processes for all schema versions.
            </summary>
            <param name="schemaId">The schema unique identifier.</param>
            <returns>The response text.</returns>
        </member>
        <member name="M:Terrasoft.WebApp.ServiceModel.ProcessEngineService.GetRunningProcessCount(Terrasoft.Core.ServiceModelContract.GetRunningProcessCountRequest)">
            <summary>
            Gets running process count for all process schema versions.
            </summary>
            <param name="request">The request with some schema version UId.</param>
            <returns>The number of running processes.</returns>
        </member>
        <member name="P:Terrasoft.WebApp.ServiceModel.ProcessEngineService.CurrentHttpContext">
            <summary>
            Gets the current HTTP context.
            </summary>
            <value>
            The current HTTP context.
            </value>
        </member>
        <member name="P:Terrasoft.WebApp.ServiceModel.ProcessEngineService.Log">
            <summary>
            Gets or sets the global logger instance for this type.
            </summary>
        </member>
    </members>
</doc>
